body {
	font-family: 'PT Mono', monospace;
	background: #e4c1f9;
	min-height: 100vh;
	overflow-x: hidden;
	margin: 0;
}

h1,h2,h3,h4,h4,.display {
	text-transform: uppercase;
	font-family: 'Major Mono Display', monospace;
}

:root {
	--col-1: #011627;
	--col-2: #f71735;
	--col-3: #41ead4;
	--col-4: #ff9f1c;
	--col-5: #fdfffc;
}

// Font color classes
.ft-1 {color: var(--col-1);}
.ft-2 {color: var(--col-2);}
.ft-3 {color: var(--col-3);}
.ft-4 {color: var(--col-4);}
.ft-5 {color: var(--col-5);}

// Background color classes
.bg-1 {background-color: var(--col-1); color: var(--col-5) !important;}
.bg-2 {background-color: var(--col-2);}
.bg-3 {background-color: var(--col-3);}
.bg-5 {background-color: var(--col-5);}

$border: 8px solid var(--col-1);
$half-border: 4px solid var(--col-1);
$mobile: 576px;
$z-top: 1000;

@mixin grid-center() {
	display: grid;
	place-items: center;
}

@mixin pseudo() {
	content: "";
	position: absolute;
	top: 0;
	left: 0;
	height: 100%;
	width: 100%;
}

@mixin image-filter() {
	filter: grayscale(0.6) brightness(2);
	mix-blend-mode: multiply;
}


a {
	// Set default link styling
	text-decoration: none;
	// Set transition
	&:not(.custom-link) {
		transition: background-size 270ms ease-in;
		// Background image as hard-stop gradient
		background-image: linear-gradient(var(--col-4) 0%, var(--col-4) 100%);
		// Set gradient to 0% width
		background-size: 0% 100%;
		background-repeat: no-repeat;
		&:hover {
			// Fill background
			background-size: 100% 100%;
		}
	}
	&:visited {
		color: blue;
	}
}

.custom-link--box {
	@include grid-center();
	// Style resets
	text-align: center;
	// Bold weight for colours
	font-weight: bold;
	position: relative;
	// Push in front of pseudo
	z-index: 1;
	// Hide pseudo overflow
	overflow: hidden;
	// Reinstate underline
	text-decoration: underline;

	&::before {
		@include pseudo();
		background-color: var(--col-4);
		// Push to back
		z-index: -1;
		// Set shape & minimise
		transform: skewX(-40deg) scaleX(0);
		// Transform to right
		transform-origin: right;
		// Ensure full coverage
		width: 200%;
		left: -25%;
		// Set transition
		transition: transform ease-in;
		// Duration set in JS by element width
		transition-duration: inherit;
	}

	&:hover {
		color: blue;
		&::before {
			transform: skewX(-40deg) scaleX(1);
			// Swap transform-origin on mouse leave with pure CSS!
			transform-origin: left;
		}
	}
}


/*=====================NAV=====================*/

:root {
	// Nav transition time as a variable for consistency in transition
	--nav-transition-time: 400ms;
}

nav {
	// Position nav on right & above all other elements
	position: fixed;
	top: 0;
	right: 0;
	z-index: $z-top;
	height: 100vh;
	transition: transform var(--nav-transition-time) ease-in;
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	font-size: 2rem;
	transform: translateX(100%);

	&::before {
		@include pseudo();
		// Shadow over page to extend click listener
		width: 200vw;
		left: -100vw;
		opacity: 0;
		background-color: var(--col-1);
		transform: scale(0);
		transition: opacity var(--nav-transition-time) ease-out;
	}
	
	button {
		// Style resets
		padding: 0;
		border: none;
		font-family: inherit;
		width: 20vh;
		height: 10vh;
		background: transparent;
		// Equal radius to width creates a semicircle
		border-radius: 25vh 25vh 0 0;
		transform-origin: center;
		// Move button to quarter down page & rotate
		position: absolute;
		top: 12.5vh;
		left: 0;
		transition: transform var(--nav-transition-time) ease-in;
		transform: translate(-75%,0vh) rotate(-90deg);
		font-size: 2rem;
		cursor: pointer;
		@media(max-width: $mobile){
			top: 2vh;
		}

		&::before {
			@include pseudo();
			// Double height to make equal width & height
			height: 200%;
			background-color: var(--col-3);
			background-image: linear-gradient(45deg, var(--col-4) 50%, var(--col-3) 50%);
			// Pull behind button
			z-index: -1;
			// Make circle
			border-radius: 50%;
			// Rotate to var(--col-1) bordered side
			transform: rotate(135deg) scale(1);
			transition: transform var(--nav-transition-time) ease-in;
			// Add half var(--col-3), half var(--col-1) border
			border: $border;
			border-color: var(--col-1) var(--col-1) var(--col-4) var(--col-4);
			// Move to account for border
			top: -8px;
			left: -8px;
		}
	}

	a {
		// Chunk up nav links
		padding: 10px;
		margin: 5vh 0;
		// Position over button pseudo
		z-index: 1;
		// Beefy font size
		font-size: calc(var(--hero-height) * 0.5);
		// Stagger slide-in of links
		transition: transform 270ms ease-in;

		&::before, &::after {
			@include pseudo();
			height: 8px;
			background-color: var(--col-4);
			transition: transform 270ms ease-in;
			transform: scaleX(0);
		}

		&::before {
			// Align with font
			top: 0.1em;
			transform-origin: left;
		}

		&::after {
			top: initial;
			bottom: 0;
			transform-origin: right;
		}

		&:hover {
			&::before {
				transform: scaleX(1);
				transform-origin: right;
			}
			
			&::after {
				transform: scaleX(1);
				transform-origin: left;
			}
		}
	}

	&:hover, &:focus {
		button::before {
			transform: rotate(-45deg);
		}
	}

	&.max {
		&::before {
			transition-delay: var(--nav-transition-time);
			transform: scale(1);
			opacity: 0.2;
		}
		button::before {
			transition-delay: 0ms;
			transform: rotate(-45deg) scale(6) translate(-25%, 25%);
			border-color: var(--col-1);
			background-size: 100% 150%;
		}
	}
}

/*====================HERO====================*/

:root {
	// Magic number - longest word fits on screen
	--hero-height: 10vw;
	@media(max-width: $mobile){
		--hero-height: 21vw;
	}
}

#hero {
	@include grid-center();
	margin: 0 auto;
	width: 100%;
	min-height: 100vh;
	padding: 1%;

	* {
		// Remove all margins
		margin: 0;
	}

	h1 {
		font-size: var(--hero-height);
		cursor: default;
	}

	.char {
		// Set display for transformations on spans
		display: inline-block;
		text-shadow: 5px 5px 0px var(--col-1);
		@media(max-width: $mobile){
			text-shadow: 4px 2px 0px var(--col-1);
		}
	}

	svg {
		height: 33%;
		width: auto;
		position: absolute;
		right: 10%;
		bottom: 10%;
		overflow: visible;
		z-index: -1;
	}
}

// ===================SVG GHOST===================

.ghost__body-top, .ghost__body-low, .ghost__tail, .ghost__eye {
	fill: var(--col-5);
}

.ghost__eye {
	stroke: var(--col-1);
	stroke-width: 5;
}

.ghost__shadow {
	fill: var(--col-1);
	stroke: none;
}

.ghost__tail {
	transform: translateX(70%);
}

/*====================HEAD====================*/

#head {
	// Positioning top & above all elements
	position: fixed;
	top: 8px;
	left: 8px;
	z-index: $z-top;
	// Hide initially
	transform: translateY(-200%);
	transition: transform 380ms ease-in;
	// Add drop shadow
	text-shadow: 2px 2px 0px var(--col-1);

	h1 {
		// Clear margin
		margin: 0;
		font-size: 2rem;
	}
	&.show {
		// Show when needed
		transform: translateY(0%);
	}
}

/*==================SECTION==================*/

:root {
 --section-padding: 2rem;
 @media(max-width: $mobile){
	 --section-padding: 1rem;
 }
}

section {
	// Stop sections going too wide
	max-width: 900px;
	// Give some y-axis space & centre horizontally
	margin: 10vh auto;
	// Hide overflow caused by ScrollTrigger
	overflow: hidden;
	h2 {
		font-size: 3rem;
		margin: 0;
		background: var(--col-5);
		border: $border;
		padding: 8px var(--section-padding);
		// Hide letters sliding in
		overflow: hidden;
		// Position over content wrapper
		position: relative;
		z-index: 1;
		.char {
			// Hide initially
			transform: translateY(100%);
		}
	}
	aside {
		// Aside illustrations for sections
		height: 200px;
		width: 200px;
		border: $border;
		background-color: var(--col-3);
		overflow: hidden;
		&.aside--left {
			// Push aside into top left corner
			float: left;
			margin: calc(0px - var(--section-padding) - 8px) 5px 5px calc(0px - var(--section-padding) - 8px);
			// Polygon to dictate text wrapping
			shape-outside: polygon(100% 0%, 0% 100%, 50% 100%, 83% 82%, 100% 50%);
			border-radius: 0 0 50% 0;
		}
		&.aside--right {
			// Push aside into top right corner
			float: right;
			margin: calc(0px - var(--section-padding) - 8px) calc(0px - var(--section-padding) - 8px) 5px 5px;
			// Polygon to dictate text wrapping
			shape-outside: polygon(0% 0%, 100% 100%, 50% 100%, 15% 81%, 0% 50%);
			border-radius: 0 0 0 50%;
		}
		// Smaller at mobile size
		@media(max-width: $mobile){
			height: 150px;
			width: 150px;
		}
		// Add filters to blend images into var(--col-3)yness
		img {
			@include image-filter();
			height: auto;
			width: 100%;
		}
	}
	.section-container {
		background: var(--col-5);
		border: $border;
		border-top: none;
		margin: 0 auto;
		// Padding on div means margins on first & last <p>s need clearing
		padding: var(--section-padding);
		p:first-of-type {margin-top: 0;}
		p:last-of-type {margin-bottom: 0;}
	}
}

@media(max-width: $mobile){
	section {
		// Resize section width on mobile
		max-width: 90%;
	}
}

// ==================ABOUT SECTION==================

#about {
	aside img {
		transform: scale(2);
	}
	.section-container {
		p:first-of-type {
			hyphens: auto;
		}
	}
}

// =================CONTACT SECTION=================

#contact {
	.section-container {
		padding-bottom: 15vh;
		p:first-of-type {
			@media(max-width: $mobile){
				// Push para down a bit on small screens
				margin-top: 7rem;
			}
		}
		@media(max-width: $mobile) {
			padding-bottom: var(--section-padding);
		}
	}
}

// ==================PORTFOLIO==================

#portfolio {

	// Container for header & button grid
	.portfolio-header {
		// Above entries
		z-index: 2;
		border-bottom: $border;
		h2 {
			@media(max-width: $mobile){
				font-size: 2rem;
			}
		}
	}

	.section-container {
		padding: 0;
	}

	.button-grid {
		// Responsive grid layout for buttons
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(25%, 1fr));
		// Gap between buttons to replicate $border
		grid-gap: 8px;
		background-color: var(--col-1);
		// Y-borders
		border-left: $border;
		border-right: $border;
		a {
			padding: 1em 0;
			font-size: 1rem;
		}
	}
}

.portfolio-entry {
	text-align: center;
	// Border divider for entries
	border-top: $border;
	// Grid setup
	display: grid;
	// Gap to replicate $border
	grid-gap: 8px;
	background-color: var(--col-1);
	// Column default layout
	grid-template: "entry-section-one" auto "entry-section-two" auto / 1fr;

	.entry-section-1, .entry-section-2 {
		// Add background color & padding
		background-color: var(--col-5);
		padding: var(--section-padding);
	}

	.entry-section-1 {
		// Assign grid area
		grid-area: entry-section-one;
	}

	.entry-section-2 {
		// Assign grid area
		grid-area: entry-section-two;
	}

	&:first-of-type {
		// Remove top border from first entry
		border-top: none;
	}

	.portfolio-entry__title {
		// Bump up title size
		font-size: 2rem;
		// Add padding & reposition using margins
		margin: calc(var(--section-padding) * -1);
		margin-bottom: var(--section-padding);
		padding: var(--section-padding) 0;
		border-bottom: $border;
		// Clear margin from header
		h3 {
			margin: 0;
		}
	}

	.portfolio-entry__tech {
		// Alternate style for tech list
		font-weight: bold;
		margin-top: 1em !important;
	}

	.portfolio-entry__links {
		// Flex links list
		display: flex;
		justify-content: space-around;

		// Change to column on mobile
		@media(max-width: $mobile) {
			flex-direction: column;
			a:not(:last-of-type) {
				margin-bottom: 1em;
			}
		}
	}

	// Elements 1,5,9...
	&:nth-of-type(4n+1) {
		// Left large column, right small column
		grid-template: "entry-section-one entry-section-two" 1fr / calc(33% - 3px) auto;
		@media(max-width: $mobile){
			// Reset to single column on mobile
			grid-template: "entry-section-one" auto "entry-section-two" auto / 1fr;
		}
	}
	
	// Elements 3,7,11...
	&:nth-of-type(4n+3) {
		// Right large column, left small column
		grid-template: "entry-section-two entry-section-one" 1fr / auto calc(33% - 3px);
		@media(max-width: $mobile){
			// Reset to single column on mobile
			grid-template: "entry-section-one" auto "entry-section-two" auto / 1fr;
		}
	}
}

// FOOTER

footer {
	margin-top: 15%;
	display: grid;
	grid-template-columns: repeat(3, 1fr);
	grid-template-rows: repeat(5, minmax(1rem, auto));
	// Name grid areas (took a while!)
	grid-template-areas: 
		"f1 f1 f2"
		"f3 f4 f2"
		"f3 f5 f6"
		"f7 f8 f8"
		"f7 f9 f10";
	text-align: center;
	// Half border to combine with grid item borders
	border: $half-border;
	background-color: var(--col-5);

	h3 {
		// Center in grid cell
		@include grid-center();
		// Half border to combine with cell/outer border
		border: $half-border;
		padding: 0.5rem 0;
		font-size: 1.5rem;
		margin: 0;
		// Assign grid areas
		&:nth-of-type(1) {grid-area: f1;}
		&:nth-of-type(2) {grid-area: f2;}
		&:nth-of-type(3) {grid-area: f6;}
	}

	.main-link {
		// Center in grid cell
		@include grid-center();
		// Half border to combine with cell/outer border
		border: $half-border;
		padding: 0.5rem 0;
		font-size: 1.2rem;
		// Assign grid areas
		&:nth-of-type(1) {grid-area: f4;}
		&:nth-of-type(2) {grid-area: f8;}
		&:nth-of-type(3) {grid-area: f10;}
	}

	.sub-link-container {
		// Half border to combine with cell/outer border
		border: $half-border;
		grid-area: f7;
		// Clear list styling
		list-style: none;
		margin: 0;
		padding: 0;
		// Grid setup
		display: grid;
		grid-template-rows: repeat(3, auto);
		grid-template-columns: repeat(2, 1fr);
		grid-template-areas: "header header";
		grid-gap: 8px;
		background-color: var(--col-1);

		@media(max-width: $mobile){
			display: block;
			width: 100%;
		}

		li {
			a {
				// Make sure link takes up full grid cell
				display: inline-block;
				width: 100%;
				padding: 5px 0;
				// Add white background
				background-color: var(--col-5);
			}
			&:first-of-type {
				padding: 5px 0;
				// Put in first 2 cells
				grid-area: header;
			}
		}
	}

	.block {
		// Half border to combine with cell/outer border
		border: $half-border;
		padding: 0.5rem 0;
		// Assign grid areas
		&:nth-of-type(1){grid-area: f3};
		&:nth-of-type(2){grid-area: f5};
		&:nth-of-type(3){grid-area: f9};
	}
}